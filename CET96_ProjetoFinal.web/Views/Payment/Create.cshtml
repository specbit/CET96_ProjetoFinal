@model CET96_ProjetoFinal.web.Models.PaymentViewModel

@{
    ViewData["Title"] = "Payment Confirmation";
}

<h1>@ViewData["Title"]</h1>
<h4>Review your company details and enter payment information to proceed.</h4>
<hr />

<div class="row">
    <div class="col-md-6">
        <div class="card card-body mb-4 bg-light">
            <h5>Company Details</h5>
            <p>
                <strong>Name:</strong> @Model.CompanyName <br />
                <strong>Description:</strong> @Model.CompanyDescription <br />
                <strong>Tax ID:</strong> @Model.CompanyTaxId <br />
                <strong>Address:</strong> @Model.CompanyAddress <br />
                <strong>Phone:</strong> @Model.CompanyPhoneNumber <br />
                <strong>Email:</strong> @Model.CompanyEmail
            </p>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card card-body shadow-sm">
            <h5>Pay with Credit Card</h5>
            <form asp-action="Create" method="post" id="paymentForm" novalidate>
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <input type="hidden" asp-for="CompanyName" />
                <input type="hidden" asp-for="CompanyDescription" />
                <input type="hidden" asp-for="CompanyTaxId" />
                <input type="hidden" asp-for="CompanyAddress" />
                <input type="hidden" asp-for="CompanyPhoneNumber" />
                <input type="hidden" asp-for="CompanyEmail" />

                <div class="form-group mb-3">
                    <label asp-for="CardHolderName"></label>
                    <input asp-for="CardHolderName" class="form-control" />
                    <span asp-validation-for="CardHolderName" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="CardNumber"></label>
                    <input asp-for="CardNumber" class="form-control" placeholder="0000 0000 0000 0000" />
                    <span asp-validation-for="CardNumber" class="text-danger"></span>
                </div>

                <div class="row mb-3">
                    <div class="col-md-6">
                        <label asp-for="ExpirationDate"></label>
                        <input asp-for="ExpirationDate" class="form-control" id="expirationDate" placeholder="MM/YY" />
                        <span asp-validation-for="ExpirationDate" class="text-danger"></span>
                    </div>
                    <div class="col-md-6">
                        <label asp-for="Cvv"></label>
                        <input asp-for="Cvv" class="form-control" placeholder="123" />
                        <span asp-validation-for="Cvv" class="text-danger"></span>
                    </div>
                </div>

                <div class="form-group mt-3">
                    <button type="submit" class="btn btn-success w-100">Confirm Payment & Create Company</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="mt-3">
    <a asp-controller="Companies" asp-action="Create" class="btn btn-outline-secondary">Back to Edit Company</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            'use strict';

            const form = document.getElementById('paymentForm');
            const expirationInput = document.getElementById('expirationDate');

            // Automatically add '/' to the expiration date
            expirationInput.addEventListener('input', function () {
                let value = expirationInput.value.replace(/\D/g, '');
                if (value.length > 2) {
                    value = value.slice(0, 2) + '/' + value.slice(2, 4);
                }
                expirationInput.value = value;
            });

            // Add custom validation on form submit
            form.addEventListener('submit', function (event) {
                // Reset validation state first
                expirationInput.classList.remove('is-invalid');
                const validationSpan = expirationInput.nextElementSibling;
                if(validationSpan) {
                    validationSpan.textContent = "";
                }

                if (!isValidExpirationDate(expirationInput.value)) {
                    // This prevents the form from being submitted
                    event.preventDefault();
                    event.stopPropagation();

                    // Show a validation error to the user
                    expirationInput.classList.add('is-invalid');
                    if(validationSpan) {
                        validationSpan.textContent = "Please enter a valid, non-expired date in MM/YY format.";
                    }
                }
            }, false);

            function isValidExpirationDate(value) {
                const regex = /^(0[1-9]|1[0-2])\/(\d{2})$/; // MM/YY format
                const match = regex.exec(value);
                if (!match) return false;

                const month = parseInt(match[1], 10);
                const year = parseInt(match[2], 10) + 2000; // Convert YY to YYYY

                const now = new Date();
                // To correctly check expiry, we need to compare against the *end* of the current month.
                // Get the first day of the next month, then subtract one millisecond.
                const endOfCurrentMonth = new Date(now.getFullYear(), now.getMonth() + 1, 1);
                endOfCurrentMonth.setMilliseconds(endOfCurrentMonth.getMilliseconds() - 1);

                const cardExpiryDate = new Date(year, month, 1); // First day of the card's expiry month

                // Check if the card's expiry date is before the end of the current month.
                if (cardExpiryDate < endOfCurrentMonth) return false;

                return true;
            }
        });
    </script>
}
